{"remainingRequest":"E:\\可视化工程\\Projects\\3d_City\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!E:\\可视化工程\\Projects\\3d_City\\src\\components\\mapbox.vue?vue&type=style&index=0&lang=css&","dependencies":[{"path":"E:\\可视化工程\\Projects\\3d_City\\src\\components\\mapbox.vue","mtime":1647503769000},{"path":"E:\\可视化工程\\Projects\\3d_City\\node_modules\\css-loader\\dist\\cjs.js","mtime":1680804487766},{"path":"E:\\可视化工程\\Projects\\3d_City\\node_modules\\vue-loader\\lib\\loaders\\stylePostLoader.js","mtime":1680804488154},{"path":"E:\\可视化工程\\Projects\\3d_City\\node_modules\\postcss-loader\\src\\index.js","mtime":1680804488085},{"path":"E:\\可视化工程\\Projects\\3d_City\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1680804470900},{"path":"E:\\可视化工程\\Projects\\3d_City\\node_modules\\vue-loader\\lib\\index.js","mtime":1680804488154}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:CgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKI21hcCB7CiAgcG9zaXRpb246IGFic29sdXRlOwogIHRvcDogMDsKICBib3R0b206IDA7CiAgd2lkdGg6IDEwMCU7CiAgIGhlaWdodDogMTAwJTsKICAgb3ZlcmZsb3cteTpoaWRkZW47CiAgICAgIG92ZXJmbG93LXg6aGlkZGVuOwp9Ci5tYXBib3hnbC1jdHJsIHsKICAgIGRpc3BsYXk6IG5vbmUgIWltcG9ydGFudDsKfQo="},{"version":3,"sources":["mapbox.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA2ZA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"mapbox.vue","sourceRoot":"src/components","sourcesContent":["<template>\n  <div id=\"map\"></div>\n</template>\n\n<script>\nimport * as THREE from \"three\";\nimport { GLTFLoader } from \"three/examples/jsm/loaders/GLTFLoader\";\nimport Wall from \"./js/Wall\";\nimport RunRing from \"./js/RunRing\";\nimport RunLine from \"./js/RunLine\";\nconst mapboxgl = require(\"mapbox-gl\"); //引入组件\n\n// eslint-disable-next-line no-unused-vars\nvar map;\nlet scene; //场景\nlet camera; //相机\nlet renderer; //创建渲染器\n\nexport default {\n  mounted() {\n    this.initmap();\n    map.on(\"style.load\", () => {\n      let customLayer = this.setCustomLayer();\n      map.addLayer(customLayer, \"waterway-label\");\n      this.addGLTF();\n      this.creatWall();\n      this.creatRunLine();\n    });\n  },\n  methods: {\n    initmap() {\n      mapboxgl.accessToken =\n        \"pk.eyJ1IjoibGl4aWFvY2hhbyIsImEiOiJjbDBxMndxZXcwZDJvM2puaXFocnd1aTAxIn0.5UxvjQgMxF9aYriiIyRnbg\"; //这里请换成自己的token\n      map = new mapboxgl.Map({\n        container: \"map\", // container id 绑定的组件的id\n        style: \"mapbox://styles/mapbox/streets-v11\", //地图样式，可以使用官网预定义的样式,也可以自定义\n        center: [121.47, 31.23], // 初始坐标系\n        zoom: 15, // starting zoom 地图初始的拉伸比例\n        pitch: 60, //地图的角度，不写默认是0，取值是0-60度，一般在3D中使用\n        bearing: -17.6, //地图的初始方向，值是北的逆时针度数，默认是0，即是正北\n        antialias: true, //抗锯齿，通过false关闭提升性能\n      });\n    },\n    setCustomLayer() {\n      const customLayer = {\n        id: \"3d-model\",\n        type: \"custom\",\n        renderingMode: \"3d\",\n        onAdd: this.initThree,\n        // eslint-disable-next-line no-unused-vars\n        render: this.threeRender,\n      };\n      return customLayer;\n    },\n    initThree(map, gl) {\n      //创建场景\n      scene = new THREE.Scene();\n      //天空盒\n\n      //   const textureCube = new THREE.CubeTextureLoader().load([\n      //     \"1.jpg\",\n      //     \"2.jpg\",\n      //     \"3.jpg\",\n      //     \"4.jpg\",\n      //     \"5.jpg\",\n      //     \"6.jpg\",\n      //   ]);\n      //   scene.background = textureCube; // 作为背景贴图\n      /**\n       * 透视投影相机设置\n       */\n      const width = window.innerWidth; // 窗口宽度\n      const height = window.innerHeight; // 窗口高度\n\n      /** 透视投影相机对象 */\n      camera = new THREE.PerspectiveCamera(60, width / height, 1, 700);\n      camera.position.set(600, 900, 600); // 树上面观察\n      camera.lookAt(scene.position); // 设置相机方向(指向的场景对象)\n      // 创建渲染器对象\n      //   const container = document.getElementById(\"scene\");\n      renderer = new THREE.WebGLRenderer({\n        canvas: map.getCanvas(),\n        context: gl,\n        antialias: true,\n      });\n      //   container.appendChild(renderer.domElement); // body元素中插入canvas对象\n\n      //创建点光源和环境光源\n      const point = new THREE.PointLight(0xffffff);\n      point.position.set(600, 900, 600); // 点光源位置\n      scene.add(point); // 点光源添加到场景中\n      // 环境光\n      const ambient = new THREE.AmbientLight(0x404040, 1);\n      scene.add(ambient);\n      renderer.autoClear = false;\n      //   pickingScene = new THREE.Scene(); //离屏渲染\n      //   pickingTexture = new THREE.WebGLRenderTarget(1, 1); //离屏渲染\n    },\n    addGLTF() {\n      const loader = new GLTFLoader();\n      loader.load(\"shanghai.gltf\", (gltf) => {\n        gltf.scene.traverse((child) => {\n          // 设置线框材质\n          if (child.isMesh) {\n            //这个判断模型是楼房还是其他  加载不同的材质\n            if ([\"CITY_UNTRIANGULATED\"].includes(child.name)) {\n              // 拿到模型线框的Geometry\n              this.setCityLineMaterial(child);\n              this.setCityMaterial(child);\n            } else if ([\"ROADS\"].includes(child.name)) {\n              //道路\n              const material = new THREE.MeshBasicMaterial({\n                color: \"rgb(41,46,76)\",\n              });\n              const mesh = new THREE.Mesh(child.geometry, material);\n              mesh.rotateX(-Math.PI / 2);\n              mesh.position.set(\n                child.position.x,\n                child.position.y + 0,\n                child.position.z\n              );\n              //   scene.add(mesh);\n            } else {\n              //地面\n              const material = new THREE.MeshBasicMaterial({\n                color: \"#040912\",\n              });\n              const mesh = new THREE.Mesh(child.geometry, material);\n              //   scene.add(mesh);\n              mesh.rotateX(-Math.PI / 2);\n              mesh.position.set(\n                child.position.x,\n                child.position.y + 0,\n                child.position.z\n              );\n            }\n          }\n          // 设置线框材质\n        });\n      });\n    },\n    threeRender(gl, matrix) {\n      const modelOrigin = [121.47, 31.23];\n      const modelAltitude = 770;\n      const modelRotate = [Math.PI / 4, 0, 0];\n      const modelAsMercatorCoordinate = mapboxgl.MercatorCoordinate.fromLngLat(\n        modelOrigin,\n        modelAltitude\n      );\n      const modelTransform = {\n        translateX: modelAsMercatorCoordinate.x,\n        translateY: modelAsMercatorCoordinate.y,\n        translateZ: modelAsMercatorCoordinate.z,\n        rotateX: modelRotate[0],\n        rotateY: modelRotate[1],\n        rotateZ: modelRotate[2],\n        scale: modelAsMercatorCoordinate.meterInMercatorCoordinateUnits(),\n      };\n      const rotationX = new THREE.Matrix4().makeRotationAxis(\n        new THREE.Vector3(1, 0, 0),\n        modelTransform.rotateX\n      );\n      const rotationY = new THREE.Matrix4().makeRotationAxis(\n        new THREE.Vector3(0, 1, 0),\n        modelTransform.rotateY\n      );\n      const rotationZ = new THREE.Matrix4().makeRotationAxis(\n        new THREE.Vector3(0, 0, 1),\n        modelTransform.rotateZ\n      );\n\n      const m = new THREE.Matrix4().fromArray(matrix);\n      const l = new THREE.Matrix4()\n        .makeTranslation(\n          modelTransform.translateX,\n          modelTransform.translateY,\n          modelTransform.translateZ\n        )\n        .scale(\n          new THREE.Vector3(\n            modelTransform.scale,\n            -modelTransform.scale,\n            modelTransform.scale\n          )\n        )\n        .multiply(rotationX)\n        .multiply(rotationY)\n        .multiply(rotationZ);\n\n      camera.projectionMatrix = m.multiply(l);\n      this.cityanimate();\n      renderer.resetState();\n      renderer.render(scene, camera);\n      map.triggerRepaint();\n    },\n    setCityMaterial(object) {\n      const shader = new THREE.ShaderMaterial({\n        uniforms: {\n          height: this.height,\n          uFlowColor: {\n            value: new THREE.Color(\"#5588aa\"),\n          },\n          uCityColor: {\n            value: new THREE.Color(\"#1B3045\"),\n          },\n        },\n        vertexShader: `\n                varying vec3 vPosition;\n                void main()\n                {\n                  vPosition = position;\n                  gl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\n                }`,\n        fragmentShader: `\nfloat distanceTo(vec2 src,vec2 dst)\n{\n    float dx=src.x-dst.x;\n    float dy=src.y-dst.y;\n    float dv=dx*dx+dy*dy;\n    return sqrt(dv);\n}\nvarying vec3 vPosition;\nuniform float height;\nuniform float uStartTime;\nuniform vec3 uSize;\nuniform vec3 uFlowColor;\nuniform vec3 uCityColor;\nvoid main()\n{\n    //模型的基础颜色\n    vec3 distColor=uCityColor;\n    // 流动范围当前点z的高度加上流动线的高度\n    float topY=vPosition.z+10.;\n    if(height>vPosition.z&&height<topY){\n        // 颜色渐变\n            float dIndex = sin((height - vPosition.z) / 10.0 * 3.14);\n            distColor = mix(uFlowColor, distColor, 1.0-dIndex);\n\n    }\n    //定位当前点位位置\n    vec2 position2D=vec2(vPosition.x,vPosition.y);\n    //求点到原点的距离\n    float Len=distanceTo(position2D,vec2(0,0));\n      if(Len>height*30.0&&Len<(height*30.0+130.0)){\n        // 颜色渐变\n        float dIndex = sin((Len - height*30.0) / 130.0 * 3.14);\n        distColor= mix(uFlowColor, distColor, 1.0-dIndex);\n    }\n    gl_FragColor=vec4(distColor,1.0);\n}`,\n        transparent: true,\n      });\n\n      const city = new THREE.Mesh(object.geometry, shader);\n      city.position.set(\n        object.position.x,\n        object.position.y + 0,\n        object.position.z\n      );\n      scene.add(city);\n      // pickingScene.add(city);\n      city.rotateX(-Math.PI / 2);\n    },\n    setCityLineMaterial(object) {\n      const edges = new THREE.EdgesGeometry(object.geometry, 1);\n      //设置模型的材质\n      const lineMaterial = new THREE.LineBasicMaterial({\n        // 线的颜色\n        color: \"rgba(38,133,254)\",\n      });\n      //把数据组合起来\n      const lineS = new THREE.LineSegments(edges, lineMaterial);\n      //设置数据的位置\n      lineS.position.set(\n        object.position.x,\n        object.position.y + 0,\n        object.position.z\n      );\n      //添加到场景\n      scene.add(lineS);\n\n      lineS.rotateX(-Math.PI / 2);\n    },\n    cityanimate() {\n      this.height.value += 0.2;\n      if (this.height.value > 100) {\n        this.height.value = 0.0;\n      }\n    },\n    creatWall() {\n      const wallData = {\n        position: {\n          x: -150,\n          y: 15,\n          z: 100,\n        },\n        speed: 0.5,\n        color: \"#efad35\",\n        opacity: 1.0,\n        radius: 420,\n        height: 120,\n        renderOrder: 5,\n      };\n\n      let wallMesh = new Wall(wallData);\n      wallMesh.mesh.material.uniforms.time = this.height;\n      scene.add(wallMesh.mesh);\n    },\n    creatRing() {\n      this.RunRing1 = new RunRing({\n        img: \"clice.png\",\n        scene: scene,\n        speed: 1,\n        radius: 400,\n        position: [\n          [400, 20, 400],\n          [100, 20, 1200],\n        ],\n      });\n    },\n    creatRunLine() {\n      this.runline1 = new RunLine({\n        img: \"z1.png\",\n        camera: camera,\n        height: 140,\n        v0: new THREE.Vector3(60, 18, -279),\n        v1: new THREE.Vector3(-17.5, 111.5, -23),\n        el: document.getElementById(\"map\"),\n        scene: scene,\n        speed: 1,\n        lineWidth: 40,\n        type: \"run\",\n      });\n      this.runline2 = new RunLine({\n        img: \"z_112.png\",\n        camera: camera,\n        height: 140,\n        v0: new THREE.Vector3(-113, 44, 666),\n        v1: new THREE.Vector3(-17.5, 111.5, -23),\n        el: document.getElementById(\"map\"),\n        scene: scene,\n        speed: 1,\n        lineWidth: 40,\n        type: \"run\",\n      });\n      this.runline3 = new RunLine({\n        img: \"z_11.png\",\n        camera: camera,\n        height: 140,\n        v0: new THREE.Vector3(-418, 113, -12),\n        v1: new THREE.Vector3(-17.5, 111.5, -23),\n        el: document.getElementById(\"map\"),\n        scene: scene,\n        speed: 1,\n        lineWidth: 40,\n        type: \"run\",\n      });\n      this.runline5 = new RunLine({\n        img: \"n.png\",\n        camera: camera,\n        height: 140,\n        v0: new THREE.Vector3(614, 18, 130),\n        v1: new THREE.Vector3(-17.5, 111.5, -23),\n        el: document.getElementById(\"map\"),\n        scene: scene,\n        speed: 1,\n        lineWidth: 40,\n        type: \"run\",\n      });\n    },\n    onDocumentMouseDown(event) {\n      this.gpuClick();\n      this.raycastClick(event);\n    },\n    raycastClick(event) {\n      event.preventDefault();\n      const vector = new THREE.Vector3(); // 三维坐标对象\n      vector.set(\n        (event.clientX / window.innerWidth) * 2 - 1,\n        -(event.clientY / window.innerHeight) * 2 + 1,\n        0.5\n      );\n      vector.unproject(camera);\n      const raycaster = new THREE.Raycaster(\n        camera.position,\n        vector.sub(camera.position).normalize()\n      );\n      const intersects = raycaster.intersectObjects(scene.children);\n      if (intersects.length > 0) {\n        const selected = intersects[0]; // 取第一个物体\n        console.log(`x坐标:${selected.point.x}`);\n        console.log(`y坐标:${selected.point.y}`);\n        console.log(`z坐标:${selected.point.z}`);\n      }\n    },\n    gpuClick() {\n      //   renderer.setRenderTarget(pickingTexture);\n      //   renderer.render(pickingScene, camera);\n    },\n  },\n  data() {\n    return {\n      height: {\n        value: 0,\n      },\n    };\n  },\n};\n</script>\n\n<style>\n#map {\n  position: absolute;\n  top: 0;\n  bottom: 0;\n  width: 100%;\n   height: 100%;\n   overflow-y:hidden;\n      overflow-x:hidden;\n}\n.mapboxgl-ctrl {\n    display: none !important;\n}\n</style>"]}]}